"use strict";(self.webpackChunksoftware_designs_and_algorithms=self.webpackChunksoftware_designs_and_algorithms||[]).push([[113],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,f=c["".concat(l,".").concat(d)]||c[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:5},i="5. Functional programming in JS/TS",s={unversionedId:"functional-programming/is_js_functional",id:"functional-programming/is_js_functional",title:"5. Functional programming in JS/TS",description:"As we have seen from examples before - JS supports main functional principles, but not static types. So, we would talk about the features that TS supports:",source:"@site/docs/4-functional-programming/is_js_functional.md",sourceDirName:"4-functional-programming",slug:"/functional-programming/is_js_functional",permalink:"/docs/functional-programming/is_js_functional",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"4. Type classes and ADTs",permalink:"/docs/functional-programming/type_classes"},next:{title:"6. \ud83d\udcda Home Task",permalink:"/docs/functional-programming/hometask"}},l={},p=[{value:"5.1 Widespread functional JS libraries",id:"51-widespread-functional-js-libraries",level:2},{value:"5.1.1 Ramda",id:"511-ramda",level:3},{value:"5.1.2 Lodash",id:"512-lodash",level:3},{value:"5.1.3 FP-TS",id:"513-fp-ts",level:3},{value:"5.1.4 React",id:"514-react",level:3},{value:"4.4 Pros and Cons of FP",id:"44-pros-and-cons-of-fp",level:2}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"5-functional-programming-in-jsts"},"5. Functional programming in JS/TS"),(0,r.kt)("p",null,"As we have seen from examples before - JS supports main functional principles, but not static types. So, we would talk about the features that TS supports:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Functions are first-class citizens"),(0,r.kt)("li",{parentName:"ul"},"Lexical scope"),(0,r.kt)("li",{parentName:"ul"},"Anonymous functions (lambdas)"),(0,r.kt)("li",{parentName:"ul"},"Parametric and ad-hoc polymorphism"),(0,r.kt)("li",{parentName:"ul"},"Possibility to implement type-classes, algebraic structures (Functors, Monads, Setoids), and algebraic data types (tuples, records, unions)")),(0,r.kt)("p",null,"But, some features are missed:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Higher-kinded types"),(0,r.kt)("li",{parentName:"ul"},"Tail call optimisations"),(0,r.kt)("li",{parentName:"ul"},"Pattern matching"),(0,r.kt)("li",{parentName:"ul"},"Built-in algebraic data types"),(0,r.kt)("li",{parentName:"ul"},"Built-in Immutable data structures"),(0,r.kt)("li",{parentName:"ul"},"Lazy evaluation"),(0,r.kt)("li",{parentName:"ul"},"No built-in support for type-classes. You can only emulate them"),(0,r.kt)("li",{parentName:"ul"},"Type system is less powerful than in Haskell or Scala. It's partially strong and not sound - it's possible to bypass the compiler, and types are not always guaranteed to be correct"),(0,r.kt)("li",{parentName:"ul"},"Less powerful abstractions for polymorphism"),(0,r.kt)("li",{parentName:"ul"},"In general, the syntax of TS is not so convenient for FP, as, for instance, in Haskell or Scala")),(0,r.kt)("p",null,"You can as well explore this fascinating official introduction to TypeScript for functional programmers - ",(0,r.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html"},"TypeScript for Functional Programmers")),(0,r.kt)("h2",{id:"51-widespread-functional-js-libraries"},"5.1 Widespread functional JS libraries"),(0,r.kt)("h3",{id:"511-ramda"},"5.1.1 Ramda"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Ramda")," is a library of functions which is written in a purer functional style. Functions are automatically curried. ",(0,r.kt)("em",{parentName:"p"},"Ramda")," does not provide any new abstractions or methodologies - just utils."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Listing 5.1.1 - Curried multiplication"',title:'"Listing',"5.1.1":!0,"-":!0,Curried:!0,'multiplication"':!0},"const double = R.multiply(2);\n\ndouble(3); // 6\n")),(0,r.kt)("p",null,"In order to run ",(0,r.kt)("em",{parentName:"p"},"Listing 4.5")," open ",(0,r.kt)("a",{parentName:"p",href:"https://ramdajs.com/repl/"},"Try ramda")),(0,r.kt)("p",null,"More info - ",(0,r.kt)("a",{parentName:"p",href:"https://ramdajs.com/"},"Ramda")),(0,r.kt)("h3",{id:"512-lodash"},"5.1.2 Lodash"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"lodash/fp")," module promotes a more functional programming (FP) friendly style by exporting an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"lodash")," with its methods wrapped to produce immutable auto-curried iterate-first data-last methods. ",(0,r.kt)("em",{parentName:"p"},"lodash")," makes JavaScript easier by taking the hassle out of working with arrays, numbers, objects, strings, etc."),(0,r.kt)("p",null,"Lodash modular methods are great for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Iterating arrays, objects, & strings"),(0,r.kt)("li",{parentName:"ul"},"Manipulating & testing values"),(0,r.kt)("li",{parentName:"ul"},"Creating composite functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Listing 5.1.2 - Array filtering"',title:'"Listing',"5.1.2":!0,"-":!0,Array:!0,'filtering"':!0},'const users = [\n  { user: "barney", age: 36, active: true },\n  { user: "fred", age: 40, active: false },\n];\n\n_.filter(users, { active: false }); // [{ user: "fred", age: 40, active: false }]\n')),(0,r.kt)("p",null,"To run ",(0,r.kt)("em",{parentName:"p"},"Listing 5.1.2")," open ",(0,r.kt)("a",{parentName:"p",href:"https://lodash.com/docs/4.17.15"},"lodash docs")," and press the ",(0,r.kt)("strong",{parentName:"p"},"Try in REPL")," button on any code example."),(0,r.kt)("p",null,"More info - ",(0,r.kt)("a",{parentName:"p",href:"https://lodash.com/"},"Lodash"),"."),(0,r.kt)("h3",{id:"513-fp-ts"},"5.1.3 FP-TS"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"fp-ts")," provides developers with popular patterns and reliable abstractions from typed functional languages in TypeScript. In contrast to other libraries enlisted above, ",(0,r.kt)("em",{parentName:"p"},"fp-ts")," provides lacked features of JS/TS, such as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Higher-kinded types"),(0,r.kt)("li",{parentName:"ul"},"Type-classes (Functors, Monads, Setoids), algebraic data types (Either, Option, IO), and basic utils for them"),(0,r.kt)("li",{parentName:"ul"},"Tool for functional composition, pattern matching, and other FP features")),(0,r.kt)("p",null,"And on the other side, it does not provide some special utils, for example, ",(0,r.kt)("inlineCode",{parentName:"p"},"head"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"groupBy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"drop"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"multiply"),", etc. You should implement them by yourself, or use another library from the ",(0,r.kt)("a",{parentName:"p",href:"https://gcanti.github.io/fp-ts/ecosystem/"},"ecosystem"),". You can use other libraries as well, such as ",(0,r.kt)("em",{parentName:"p"},"lodash"),", ",(0,r.kt)("em",{parentName:"p"},"ramda"),", etc. But try not to mix them a lot, and prefer more natural to ",(0,r.kt)("em",{parentName:"p"},"fp-ts")," approaches."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Listing 5.1.3 - Transform first element of array"',title:'"Listing',"5.1.3":!0,"-":!0,Transform:!0,first:!0,element:!0,of:!0,'array"':!0},"import * as O from 'fp-ts/Option';\nimport { flow } from 'fp-ts/function';\n\nconst double = n => n * 2;\nconst head = <A>(as: ReadonlyArray<A>): O.Option<A> => (as.length === 0 ? O.none : O.some(as[0]));\nconst inverse = (n: number): O.Option<number> => (n === 0 ? O.none : O.some(1 / n));\n\nconst main = flow<ReadonlyArray<number>>(\n  head, // get first element\n  O.map(double), // double it\n  O.chain(inverse), // 1 / n\n  O.match(\n    () => 'no result', // onNone handler\n    (head) => `Result is ${head}` // onSome handler\n  ),\n);\n\nmain([5, 2, 3]); // Result is 0.1\nmain([]); // no result\nmain([0]); // no result\n")),(0,r.kt)("h3",{id:"514-react"},"5.1.4 React"),(0,r.kt)("p",null,"As you know, ",(0,r.kt)("em",{parentName:"p"},"React")," is one of the most popular JavaScript libraries to create Web user interfaces. Its success is due to several factors, but maybe one of them is the clean and effective approach to programming. In the ",(0,r.kt)("em",{parentName:"p"},"React")," environment, every piece of a UI is a component. Components can be composed together to create other components. The application itself is a component: a composition of components. For example, ",(0,r.kt)("em",{parentName:"p"},"Listing 4.7"),". The task is to create a user form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Listing 5.1.4 - Example of user form app created using React"',title:'"Listing',"5.1.4":!0,"-":!0,Example:!0,of:!0,user:!0,form:!0,app:!0,created:!0,using:!0,'React"':!0},"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Input = ({ value, label, onChange }) => (\n  <div>\n    <label>\n      {label}: <input value={value} onChange={(event) => onChange(event.target.value)}></input>\n    </label>\n  </div>\n);\n\nconst ShowButton = ({ onClick, isShowing }) => {\n  return (\n    <button onClick={onClick}>\n      {isShowing ? 'Hide values' : 'Show values'}\n    </button>\n  );\n};\n\nconst App = () => {\n  const [formState, setFormState] = useState({\n    name: '',\n    lastName: '',\n    email: ''\n  });\n  const [showValues, setShowValues] = useState(false);\n  const toggleValues = () => setShowValues((isShowing) => !isShowing);\n\n  const setStateFor = (field) => (value) =>\n    setFormState((state) => ({ ...state, [field]: value }));\n\n  return (\n    <div>\n      <Input\n        value={formState.name}\n        label=\"Name\"\n        onChange={setStateFor('name')}\n      />\n      <Input\n        value={formState.lastName}\n        label=\"Last name\"\n        onChange={setStateFor('lastName')}\n      />\n      <Input\n        value={formState.email}\n        label=\"Email\"\n        onChange={setStateFor('email')}\n      />\n      <ShowButton onClick={toggleValues} isShowing={showValues}/>\n      {showValues ? (\n        <ul>\n          {Object.entries(formState).map(([field, value]) => (\n            <li key={field}>\n              {field}: {value}\n            </li>\n          ))}\n        </ul>\n      ) : null}\n    </div>\n  );\n};\n")),(0,r.kt)("p",null,"In the code above, there are three components ",(0,r.kt)("inlineCode",{parentName:"p"},"Input"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ShowButton"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Main"),". By composing components in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Main")," component a variety of screens can be created. For example, to create different types of ",(0,r.kt)("inlineCode",{parentName:"p"},"Input")," the props have to be passed instead of creating three different ",(0,r.kt)("inlineCode",{parentName:"p"},"Input")," elements. The state is immutable and changed only by calling callbacks which re-renders components with just a new state. It is pretty reusable."),(0,r.kt)("p",null,"You can run this code here: ",(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/app-zi9cxr"},"https://codesandbox.io/s/app-zi9cxr"),"."),(0,r.kt)("p",null,"React is an excellent example of abstracting the side effects of the application. As we know, writing to the DOM and screen is a side effect. And in React, we are not doing it! The logic of our application is fully abstracted, and we define how our UI would look. How it will be rendered is not our concern. Purely to the HTML string? Directly applied to the DOM? Or to the native mobile application? You can choose any variant, and the main logic of your application wouldn't change."),(0,r.kt)("p",null,"More info - ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React"),"."),(0,r.kt)("h2",{id:"44-pros-and-cons-of-fp"},"4.4 Pros and Cons of FP"),(0,r.kt)("p",null,"Pros"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Due to limitations and strict rules applications written in FP manner are much more stable, and fault-tolerant and have almost zero number of runtime errors"),(0,r.kt)("li",{parentName:"ul"},"Code becomes more straightforward and self-explanatory because of high abstractions and declarative"),(0,r.kt)("li",{parentName:"ul"},"Easier testing and debugging"),(0,r.kt)("li",{parentName:"ul"},"High-modularity"),(0,r.kt)("li",{parentName:"ul"},"Much easier to write high cohesion and low coupled code")),(0,r.kt)("p",null,"Cons"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Some languages are not optimized for functional programming and code might be less effective and readable"),(0,r.kt)("li",{parentName:"ul"},"The very steep learning curve"),(0,r.kt)("li",{parentName:"ul"},"It is not so widespread as imperative programming, so it's way harder to find novice-friendly resources")))}m.isMDXComponent=!0}}]);