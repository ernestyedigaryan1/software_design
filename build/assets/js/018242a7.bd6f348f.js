"use strict";(self.webpackChunksoftware_designs_and_algorithms=self.webpackChunksoftware_designs_and_algorithms||[]).push([[680],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=m(n),u=i,h=d["".concat(s,".").concat(u)]||d[u]||c[u]||r;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var m=2;m<r;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5301:(e,t,n)=>{n.d(t,{r:()=>l});var a=n(7294),i=n(9960);const r="link_OsV6";function l(e){const{url:t,title:n,children:l}=e;return a.createElement(i.Z,{className:"button-link button--lg",to:t},a.createElement("div",{className:r},a.createElement("span",null,n),l))}},9330:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>S,contentTitle:()=>x,default:()=>P,frontMatter:()=>T,metadata:()=>O,toc:()=>_});var a=n(7462),i=n(7294),r=n(3905),l=n(6010);const o="Minimum grade to successfully complete the course - 60%.",s="FAILED",m="FAILED_WITH_IMPROVEMENT",p="SUCCESSFUL",c="SUCCESSFUL_WITH_IMPROVEMENT",d={[s]:o,[m]:`${o} Please, provide review comments, set draft grade and click "Send back for updates" button in the Learn.`,[c]:'Please, provide a draft grade and click "Send back for updates" button in the Learn. If student is happy with grade click "Mark as passed" button',[p]:'Please, provide a grade and click "Mark as passed" button'},u="btn_uHO7",h="center_riVV",f="topic_heB4",k="checkboxLabel_tYSW",N="checkbox_gA9i",g="gradeContainer_H0yn",y="gradeTable_EWiK",b="grade_mgZd",C="danger_CE6G",v="success_W9q4",w="table_dTVq";function E(e){let{data:t}=e;const[n,a]=(0,i.useState)(0),[r,o]=(0,i.useState)(0),[E,T]=(0,i.useState)(!1),[x,O]=(0,i.useState)(s),S=(e=>e.map((e=>e.items)).map((e=>e.map((e=>e.points)))).flat().reduce(((e,t)=>e+t)))(t),_=()=>r>=60,j=()=>{const e=((e,t)=>Math.round(100*t/e))(S,n);o(e)};(0,i.useEffect)((()=>{j()}),[n]),(0,i.useEffect)((()=>{T(_()),_()?O(100!==r?c:p):r>0&&O(m)}),[r]);const P=t.map(((e,t)=>i.createElement(i.Fragment,{key:e.title},i.createElement("tr",null,i.createElement("td",{colSpan:"3",className:f},e.title)),e.items.map(((e,n)=>i.createElement("tr",{key:e.text},i.createElement("td",null,e.text),i.createElement("td",{className:h},e.points),i.createElement("td",{className:h},i.createElement("input",{className:N,id:`${t}${n}`,type:"checkbox",onChange:t=>((e,t)=>{a((n=>n+t*(e?1:-1)))})(t.target.checked,e.points)}),i.createElement("label",{className:k,htmlFor:`${t}${n}`}))))))));return i.createElement("div",null,i.createElement("table",{className:w},i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Criteria"),i.createElement("th",null,"Coefficient"),i.createElement("th",null))),i.createElement("tbody",null,P)),i.createElement("div",{className:g},i.createElement("div",{className:y},i.createElement("table",{className:w},i.createElement("tbody",null,i.createElement("tr",{className:f},i.createElement("th",null,"Student's grade"),i.createElement("td",{className:(0,l.Z)(b,C,{[v]:E})},r,"%")))),i.createElement("button",{className:u,onClick:()=>{document.querySelectorAll("input[type='checkbox']").forEach((e=>e.checked=!1)),a(0),o(0)}},"Reset")),i.createElement("p",{className:(0,l.Z)(C,{[v]:E})},d[x])))}n(5301);const T={sidebar_position:6},x="6. \ud83d\udcda Home Task",O={unversionedId:"functional-programming/hometask",id:"functional-programming/hometask",title:"6. \ud83d\udcda Home Task",description:"The home task should be done using TypeScript.",source:"@site/docs/4-functional-programming/hometask.mdx",sourceDirName:"4-functional-programming",slug:"/functional-programming/hometask",permalink:"/docs/functional-programming/hometask",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"5. Functional programming in JS/TS",permalink:"/docs/functional-programming/is_js_functional"}},S={},_=[{value:"Testing the project",id:"testing-the-project",level:2},{value:"Task",id:"task",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Tips",id:"tips",level:2},{value:"Evaluation Criteria",id:"evaluation-criteria",level:2}],j={toc:_};function P(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},j,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"6--home-task"},"6. \ud83d\udcda Home Task"),(0,r.kt)("p",null,"The home task should be done using TypeScript."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The starter code for the home task is located in ",(0,r.kt)("em",{parentName:"p"},"docs/4-functional-programming/hometask")," folder.")),(0,r.kt)("h2",{id:"testing-the-project"},"Testing the project"),(0,r.kt)("p",null,"In the project directory, run the command bellow to install all required packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install\n")),(0,r.kt)("p",null,"To try to run the ",(0,r.kt)("em",{parentName:"p"},"example.ts"),", enter the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run start\n")),(0,r.kt)("p",null,"To run the tests, enter the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run test\n")),(0,r.kt)("h2",{id:"task"},"Task"),(0,r.kt)("p",null,"Imagine that there is some executor, or taxi driver, whatever, who needs to reach some clients. Each client has some ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"reward")," for reaching the executor. Also, client might have a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"demands"),". If they are exist, it means that the executor should have such ",(0,r.kt)("inlineCode",{parentName:"p"},"possibilities")," to meet them."),(0,r.kt)("p",null,"The main task is to write a code inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"show")," function in ",(0,r.kt)("inlineCode",{parentName:"p"},"/src/main.ts"),". This function takes two parameters and should return the string in the format below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"This executor meets the demands of only 3 out of 4 clients\n\nAvailable clients sorted by highest reward:\nname: Philip, distance: 30.364, reward: 600\nname: John, distance: 21.378, reward: 250\nname: Gregor, distance: 20.025, reward: 230\n")),(0,r.kt)("p",null,"But before starting, you need to implement the missed parts of some utils and algebraic types."),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("p",null,"During the implementation of each of the functions in utils, you should verify its correctness in the tests. It is also a good example of how the function would be used."),(0,r.kt)("p",null,"Steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"First of all, you need to finish the implementation of the ",(0,r.kt)("inlineCode",{parentName:"li"},"pipe")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"flow")," functions (",(0,r.kt)("inlineCode",{parentName:"li"},"src/fp/utils.ts"),"). The ",(0,r.kt)("inlineCode",{parentName:"li"},"flow")," currently accepts only a maximum of up to 3 functions. You need to extend it up to 4 by adding new overloads. Same with the ",(0,r.kt)("inlineCode",{parentName:"li"},"pipe")," - extend it up to 4 and provide the implementation."),(0,r.kt)("li",{parentName:"ol"},"Next, you can move to ",(0,r.kt)("inlineCode",{parentName:"li"},"src/fp/maybe.ts"),". Get to know what it is, look at the examples in the tests, and implement the code of the ",(0,r.kt)("inlineCode",{parentName:"li"},"fold")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"fromNullable")," functions."),(0,r.kt)("li",{parentName:"ol"},"Move to ",(0,r.kt)("inlineCode",{parentName:"li"},"src/fp/either.ts")," and implement code of the ",(0,r.kt)("inlineCode",{parentName:"li"},"map"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"fold")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"fromPromise")," functions."),(0,r.kt)("li",{parentName:"ol"},"Get to know what is it inside the ",(0,r.kt)("inlineCode",{parentName:"li"},"src/fp/setoid.ts")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"src/fp/ord.ts"),", implement the ",(0,r.kt)("inlineCode",{parentName:"li"},"sort")," inside of the ",(0,r.kt)("inlineCode",{parentName:"li"},"array.ts"),"."),(0,r.kt)("li",{parentName:"ol"},"When all preparations are done, and all tests inside the ",(0,r.kt)("inlineCode",{parentName:"li"},"test/fp")," are passing (ensure it by ",(0,r.kt)("inlineCode",{parentName:"li"},"npm run test:fp")," command), you can start implementing the code of the ",(0,r.kt)("inlineCode",{parentName:"li"},"src/main.ts"),"."),(0,r.kt)("li",{parentName:"ol"},"Fix the ",(0,r.kt)("inlineCode",{parentName:"li"},"getClients")," function, because it returns the raw data of the client, where ",(0,r.kt)("inlineCode",{parentName:"li"},"demands")," is just ",(0,r.kt)("inlineCode",{parentName:"li"},"Array<Demand> | null"),". You need to transform it to the ",(0,r.kt)("inlineCode",{parentName:"li"},"Maybe<Array<Demand>>"),"."),(0,r.kt)("li",{parentName:"ol"},"Implement the code of the ",(0,r.kt)("inlineCode",{parentName:"li"},"show")," function.")),(0,r.kt)("p",null,"The details of the ",(0,r.kt)("inlineCode",{parentName:"p"},"show")," function:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The first line represents how many of the clients the executor can reach."),(0,r.kt)("li",{parentName:"ul"},"If all of them: ",(0,r.kt)("inlineCode",{parentName:"li"},"This executor meets all demands of all clients!"),"."),(0,r.kt)("li",{parentName:"ul"},"If some of them: ",(0,r.kt)("inlineCode",{parentName:"li"},"This executor meets the demands of only ${number} out of ${number} clients"),"."),(0,r.kt)("li",{parentName:"ul"},"If none of them: ",(0,r.kt)("inlineCode",{parentName:"li"},"This executor cannot meet the demands of any client!"),". This would be the only line, and the result itself would be ",(0,r.kt)("inlineCode",{parentName:"li"},"left"),".")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Remember that you should check if the executor meets the demands of the particular client only if the demands are ",(0,r.kt)("em",{parentName:"p"},"none"),"! If it is ",(0,r.kt)("em",{parentName:"p"},"none")," - the demands is met by default.")),(0,r.kt)("p",null,"The first line of the table should be:\n",(0,r.kt)("inlineCode",{parentName:"p"},"Available clients sorted by ")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"highest reward")," in case if ",(0,r.kt)("inlineCode",{parentName:"p"},"SortBy.reward")," was passed, or ",(0,r.kt)("inlineCode",{parentName:"p"},"distance to executor")," in case of ",(0,r.kt)("inlineCode",{parentName:"p"},"SortBy.distance"),"."),(0,r.kt)("h2",{id:"tips"},"Tips"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Investigate every file in the ",(0,r.kt)("inlineCode",{parentName:"li"},"src")," folder, especially ",(0,r.kt)("inlineCode",{parentName:"li"},"utils")," files. There are useful functions which might come in handy."),(0,r.kt)("li",{parentName:"ul"},"Check the usage examples of different functions and type classes in the tests."),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"fold"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"map")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"getOrElse")," to get or manipulate the data inside the type class. Avoid using of the ",(0,r.kt)("inlineCode",{parentName:"li"},"either.right")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"maybe.value")," (but of course, you should use it in order to implement functions like ",(0,r.kt)("inlineCode",{parentName:"li"},"map")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"fold"),").")),(0,r.kt)("h2",{id:"evaluation-criteria"},"Evaluation Criteria"),(0,r.kt)(E,{data:[{title:"Common",items:[{text:"All tests inside 'main.spec' file are passed",points:2},{text:"60% of 'fp/*.spec' tests are passed",points:.5},{text:"All of 'fp/*.spec' tests are passed",points:1},{text:"Imperative constructions (like `if`, `while`, `switch` or `for` statements, ternary operator allowed) are not in use",points:.5},{text:"'any' type is used nowhere",points:1}]}],mdxType:"TableForMentors"}))}P.isMDXComponent=!0}}]);