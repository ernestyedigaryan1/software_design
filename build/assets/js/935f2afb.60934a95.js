"use strict";(self.webpackChunksoftware_designs_and_algorithms=self.webpackChunksoftware_designs_and_algorithms||[]).push([[53],{1109:i=>{i.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"4. Functional Programming","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"1. Introduction","href":"/docs/functional-programming/fp_introduction","docId":"functional-programming/fp_introduction"},{"type":"link","label":"2. Main Concepts","href":"/docs/functional-programming/main_concepts","docId":"functional-programming/main_concepts"},{"type":"link","label":"3. Categories and Functors","href":"/docs/functional-programming/categories_and_functors","docId":"functional-programming/categories_and_functors"},{"type":"link","label":"4. Type classes and ADTs","href":"/docs/functional-programming/type_classes","docId":"functional-programming/type_classes"},{"type":"link","label":"5. Functional programming in JS/TS","href":"/docs/functional-programming/is_js_functional","docId":"functional-programming/is_js_functional"},{"type":"link","label":"6. \ud83d\udcda Home Task","href":"/docs/functional-programming/hometask","docId":"functional-programming/hometask"}]}]},"docs":{"functional-programming/categories_and_functors":{"id":"functional-programming/categories_and_functors","title":"3. Categories and Functors","description":"You probably already heard about such a thing as Functor. What is this actually? Before diving into it, let\'s talk a little about the basic theory.","sidebar":"tutorialSidebar"},"functional-programming/fp_introduction":{"id":"functional-programming/fp_introduction","title":"1. Introduction","description":"Functional programming (FP) is a programming paradigm where programs are constructed by applying and composing functions. It is different from the imperative way of thinking of how to build the application. The main unit of functional programming is a function. We already use functions on daily basis. So what is the difference in this case? Functions in FP are different from such in procedural programming, where the program is built upon procedures, dedicated code pieces, and just subprograms. In FP, it\'s more like a mathematical function, which maps one value to another. In mathematics, when we write f(x) = x * 2, we would always know that f(5) = 10 because in terms of FP, functions are pure. The way to build an application in the FP paradigm is to combine such functions, where each one is some kind of expression over the data. Combination of such functions is called composition.","sidebar":"tutorialSidebar"},"functional-programming/hometask":{"id":"functional-programming/hometask","title":"6. \ud83d\udcda Home Task","description":"The home task should be done using TypeScript.","sidebar":"tutorialSidebar"},"functional-programming/is_js_functional":{"id":"functional-programming/is_js_functional","title":"5. Functional programming in JS/TS","description":"As we have seen from examples before - JS supports main functional principles, but not static types. So, we would talk about the features that TS supports:","sidebar":"tutorialSidebar"},"functional-programming/main_concepts":{"id":"functional-programming/main_concepts","title":"2. Main Concepts","description":"As we reviewed earlier, there are rules that the program should follow to be purely functional. Let\'s look a closer at these main FP concepts.","sidebar":"tutorialSidebar"},"functional-programming/type_classes":{"id":"functional-programming/type_classes","title":"4. Type classes and ADTs","description":"Another important thing in functional programming is type-classes and algebraic data types. This is what makes functional programming so flexible and abstract by providing a convenient way of using ad-hoc polymorphism. Actually, we already dealt with it in the previous article when talked about the functors.","sidebar":"tutorialSidebar"}}}')}}]);